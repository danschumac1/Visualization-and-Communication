---
title: "Scales follow along"
format: html
editor: visual
---

```{r}
#| label = "setup",
#| include = FALSE
library(dplyr)
library(ggplot2)

theme_set(theme_minimal())
```

```{r}
sapply(mpg, class)

```

```{r}
ggplot(mpg, aes(displ, hwy)) + 
  geom_point(aes(color = class))

```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = cyl)) +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_continuous()

?scale_x_continuous
```

-   scale_x_continuous(
    -    name = waiver(),
    -    breaks = waiver(),
        -   that's the 2,3,4 ... in above
    -    minor_breaks = waiver(),
        -   that's the lines between 2,3,4... above
    -    n.breaks = NULL,
    -    labels = waiver(),
    -    limits = NULL,
        -   what is lowest and highest point of graph
    -    expand = waiver(),
    -    oob = censor,
    -    na.value = NA_real\_,
    -    trans = "identity",
        -   identity means the way it is. but could do log() of var
    -    guide = waiver(),
    -    position = "bottom"
    -    sec.axis = waiver()
        -   THIS IS COOL! Can be misleading.
        -   instead you could plot them as z scores
        -   have to show secondary as a function of the primary axis.

```{r}
ggplot(mpg,aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous("Displacement") +
  scale_y_continuous("Highway Miles") +
  scale_color_discrete("Vehicle\nClass")
```

## Real purpose of scale functions

```{r}
ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous(breaks = 2:7, limits = c(-5,10))
```

```{r}
#shows all integers on x
ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous(breaks = -5:10, limits = c(-5,10))
```

```{r}
#by 5s
ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous(breaks = seq(-5,10,5), limits = c(-5,10))
```

```{r}
#using limits to discard data
ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous( breaks = 1:7, limits = c(3,6))
#this gets rid of everything before 3 :(  and after 6 :(
```

```{r}
ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_x_continuous(breaks = c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5),
                     # labels = c("1.5 lit.", "Î±", "C", "D", "E", "F")
                     labels = paste(c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5), 'lt'))
```

```{r}
ggplot(mpg,aes(displ,hwy, color = class)) +
  geom_point() +
  scale_color_discrete(labels = c("1", "Compact", "DAN", "LoIsSA", "5", "6", "7")) +
  scale_x_continuous(limits = c(0, 7),
                     breaks = c(0:7))
```

Theme Void

```{r}
ggplot(mpg,aes(displ,hwy, color = class)) +
  geom_point() +
  scale_color_discrete(labels = c("1", "Compact", "DAN", "LoIsSA", "5", "6", "7")) +
  scale_x_continuous(limits = c(0, 7),
                     breaks = c(0:7)) +
  theme_void()
```

```{r}

# Sample grabs random row numbers
# Slice turns thouse row numbers into a dataframe

set.seed(123456)
d1 <- diamonds %>% slice(sample(nrow(diamonds),100))

ggplot(d1, aes(clarity, price)) +
  geom_point(alpha = 1/2)
```

```{r}
ggplot(d1, aes(clarity,price)) +
  geom_point(alpha = 1/2) +
  
  #COMAS TO LABELS
  scale_y_continuous(labels = scales::label_dollar(prefix = '$'))
 # scale_y_continuous(labels = scales::label_comma())
```

## Legends

```{r}
mydata = data.frame( p = 1:3,
                     q = 1:3,
                     r = c('a','b','c'))
mydata %>% 
  ggplot(aes(p,q)) +
    geom_point(aes(color = r))
```

# THEMES

change non-data elements.

each element is associated with an **element function**

create a **nice looking visualization**

Most args inside of theme function will start with element\_

can use complete **themes** like theme minimal (its a wrapper... changes background, font etc.)

remember you can do ?theme to see help for theme (THERE IS A LOT)

```{r}
df = data.frame(
  x = 1:3,
  y = 1:3,
  z = LETTERS[1:3])

base = ggplot(df,aes(x,y)) +
  geom_point(size=4) +
  theme_minimal()

print(base)
```

#### plot vs panel

plot is everything. White area, margins, padding titles, captions, subtitle, legend.

panel is just the dots and lines and axis (no labels or anything)

```{r}
#| eval = FALSE,
#| echo = TRUE

# Don't run this code

element_rect(fill = NULL, 
             color = NULL, 
             linewidth = NULL, 
             linetype = NULL,
             inherit.blank = FALSE)

```

You can include pictures using element_grob

element_text

Element_line

element_rect are the most common.

```{r}
#whole box
base +
  theme(plot.background = element_rect(fill = 'hotpink'))

#just the frame
base + 
    theme(panel.background = element_rect(fill = 'hotpink'))

#both
base +
    theme(plot.background = element_rect(fill = 'hotpink'),
          panel.background = element_rect(fill = 'red'))

base +
    theme(plot.background = element_rect(fill = 'hotpink'),
          panel.background = element_rect(linewidth = 4,fill = 'red'))

base +
    theme(plot.background = element_rect(fill = 'hotpink'),
          panel.background = element_rect(linetype = 'twodash',linewidth = 4,fill = 'red'))

base +
    theme(
      plot.background = element_rect(fill = 'hotpink'),
      panel.background = element_rect(linetype = 'twodash',linewidth = 4,fill = 'red'), panel.grid.major = element_line(color = 'yellow',linewidth = 4,linetype = 'dotted'))
```

```{r}
#no element function
base + theme(aspect.ratio = .75)
```

### Axis

```{r}
#| echo = TRUE
# Axis title, axis text, axis tic, arrows.
base + theme(axis.line = element_line(arrow = arrow(angle = 15, 
                                                    length = unit(.15, "inches"),
                                                    type = "open")))
```

```{r}

```
